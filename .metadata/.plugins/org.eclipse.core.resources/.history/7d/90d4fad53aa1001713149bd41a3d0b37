/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.5 [05.21]
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */

/* Begin of <includes> initialization, DO NOT MODIFY LINES BELOW */

#include "TSK1.h"
#include "FRTOS1.h"
#include "frtos_tasks.h"

/* End <includes> initialization, DO NOT MODIFY LINES ABOVE */

#include "application.h"
#include "ihm.h"
#include "clock.h"
#include "communication.h"
#include "Level.h"
#include "accelerometer.h"
#include "gps.h"

TaskHandle_t xHandleMainTask;

static const TickType_t xMainDelay				= (60000 / portTICK_PERIOD_MS);
/*********************************************************************************************
  * Main task
  * Espera as notificacoes para atualizacoes das informacoes de telemtria
  *
  ********************************************************************************************/

static portTASK_FUNCTION(run_main, pvParameters) {

	initClock();

	communication_init();

	while(1) {

		main_task();

		vTaskDelay(xMainDelay);
	}

	vTaskDelete(run_main);
}

/*********************************************************************************************
 *  Leitura dos canais analogicos e digitais
 *
 ********************************************************************************************/

static portTASK_FUNCTION(run_data, pvParameters) {

	while(1) {

		tank_task();
	}

	vTaskDelete(run_data);
}

/*********************************************************************************************
 *  Gerencimento do IHM LCD-Touch
 *
 ********************************************************************************************/

static portTASK_FUNCTION(run_ihm, pvParameters) {

	initIHM();

	while(1) {

		ihm_task();
	}

	deInitIHM();

	vTaskDelete(run_ihm);
}


/*********************************************************************************************
 *  Task de gerenciamento do GPS/NMEA
 *
 *********************************************************************************************/

static portTASK_FUNCTION(run_gps, pvParameters) {

	NMEA_init();

	while(1) {

		gps_task();
	}

	vTaskDelete(run_gps);
}

/*********************************************************************************************
 *
 *  Task leitura do acelerometro
 *
 ********************************************************************************************/

static portTASK_FUNCTION(run_accel, pvParameters) {

	initAccelerometer();

	while(1) {

		accelerometer_task();
	}

	vTaskDelete(run_accel);
}

/*********************************************************************************************
 *  Task para execucao da call back dos cmds recebidos
 *  O comando de telemetria espera as notificacoes para atualizacoes das informacoes via fila de mensagens
 *
 *********************************************************************************************/

static portTASK_FUNCTION(run_callback, pvParameters) {

	initApp();

	while(1) {

		callback_task();
	}

	vTaskDelete(run_callback);
}

/*********************************************************************************************
 * Task para processamento da recepcao dos dados
 *
 *********************************************************************************************/

static portTASK_FUNCTION(run_RX, pvParameters) {

	while(1) {

		rxPackage_task();
	}

	vTaskDelete(run_RX);
}

/*********************************************************************************************
 *  Task para processamento das transmissao
 *
 ********************************************************************************************/

static portTASK_FUNCTION(run_TX, pvParameters) {

	while(1) {

		txPackage_task();
	}

	vTaskDelete(run_TX);
}

/*********************************************************************************************
 *  Funcao para criacao das tasks
 *
 ********************************************************************************************/

void CreateTasks(void) {

	if (FRTOS1_xTaskCreate(
			run_main, /* pointer to the task */
			"run_main", /* task name for kernel awareness debugging */
			configMINIMAL_STACK_SIZE, /* task stack size */
			(void*)NULL, /* optional task startup argument */
			tskIDLE_PRIORITY + 0, /* initial priority */
			&xHandleMainTask /* optional task handle to create */
	) != pdPASS) {
		/*lint -e527 */
		for (;;) {
		}; /* error! probably out of memory */
		/*lint +e527 */
	}
	if (FRTOS1_xTaskCreate(
			run_RX, /* pointer to the task */
			"run_RX", /* task name for kernel awareness debugging */
			configMINIMAL_STACK_SIZE, /* task stack size */
			(void*)NULL, /* optional task startup argument */
			tskIDLE_PRIORITY + 0, /* initial priority */
			&xHandleCommunicationTask /* optional task handle to create */
	) != pdPASS) {
		/*lint -e527 */
		for (;;) {
		}; /* error! probably out of memory */
		/*lint +e527 */
	}
	if (FRTOS1_xTaskCreate(
			run_data, /* pointer to the task */
			"run_data", /* task name for kernel awareness debugging */
			configMINIMAL_STACK_SIZE + 0, /* task stack size */
			(void*)NULL, /* optional task startup argument */
			tskIDLE_PRIORITY + 0, /* initial priority */
			&xHandleDataTask /* optional task handle to create */
	) != pdPASS) {
		/*lint -e527 */
		for (;;) {
		}; /* error! probably out of memory */
		/*lint +e527 */
	}
	if (FRTOS1_xTaskCreate(
			run_ihm, /* pointer to the task */
			"run_ihm", /* task name for kernel awareness debugging */
			configMINIMAL_STACK_SIZE + 0, /* task stack size */
			(void*)NULL, /* optional task startup argument */
			tskIDLE_PRIORITY + 0, /* initial priority */
			&xHandleIHMTask /* optional task handle to create */
	) != pdPASS) {
		/*lint -e527 */
		for (;;) {
		}; /* error! probably out of memory */
		/*lint +e527 */
	}

	if (FRTOS1_xTaskCreate(
			run_gps, /* pointer to the task */
			"run_gps", /* task name for kernel awareness debugging */
			configMINIMAL_STACK_SIZE + 0, /* task stack size */
			(void*)NULL, /* optional task startup argument */
			tskIDLE_PRIORITY + 0, /* initial priority */
			&xHandleGPSTask /* optional task handle to create */
	) != pdPASS) {
		/*lint -e527 */
		for (;;) {
		}; /* error! probably out of memory */
		/*lint +e527 */
	}

	if (FRTOS1_xTaskCreate(
			run_accel, /* pointer to the task */
			"run_accel", /* task name for kernel awareness debugging */
			configMINIMAL_STACK_SIZE + 0, /* task stack size */
			(void*)NULL, /* optional task startup argument */
			tskIDLE_PRIORITY + 0, /* initial priority */
			&xHandleAccelTask /* optional task handle to create */
	) != pdPASS) {
		/*lint -e527 */
		for (;;) {
		}; /* error! probably out of memory */
		/*lint +e527 */
	}

	if (FRTOS1_xTaskCreate(
			run_callback, /* pointer to the task */
			"run_callback", /* task name for kernel awareness debugging */
			configMINIMAL_STACK_SIZE + 0, /* task stack size */
			(void*)NULL, /* optional task startup argument */
			tskIDLE_PRIORITY + 0, /* initial priority */
			&xHandleCallBackTask /* optional task handle to create */
	) != pdPASS) {
		/*lint -e527 */
		for (;;) {
		}; /* error! probably out of memory */
		/*lint +e527 */
	}

	if (FRTOS1_xTaskCreate(
			run_TX, /* pointer to the task */
			"run_TX", /* task name for kernel awareness debugging */
			configMINIMAL_STACK_SIZE+128, /* task stack size */
			(void*)NULL, /* optional task startup argument */
			tskIDLE_PRIORITY + 0, /* initial priority */
			&xHandleRunTxTask /* optional task handle to create */
	) != pdPASS) {
		/*lint -e527 */
		for (;;) {
		}; /* error! probably out of memory */
		/*lint +e527 */
	}
}
